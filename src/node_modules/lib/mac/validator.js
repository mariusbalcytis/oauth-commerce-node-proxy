var qs = require('qs');
var crypto = require('crypto');
var async = require('async');
var DeferredCallback = require('lib/deferredCallback.js');
var errors = require('lib/errors');

var Validator = module.exports = function(signerRegistry, timestampManager, blacklistManager, tokenManager, credentialsManager) {
    this.signerRegistry = signerRegistry;
    this.timestampManager = timestampManager;
    this.blacklistManager = blacklistManager;
    this.tokenManager = tokenManager;
    this.credentialsManager = credentialsManager;
};


Validator.prototype.validateRequest = function(req, macParams, credentialsId, callback) {
    var method = req.method,
        url = req.url,
        host = req.headers.host,
        protocol = req.protocol,
        signerRegistry = this.signerRegistry,
        blacklistManager = this.blacklistManager,
        timestampManager = this.timestampManager,
        credentialsManager = this.credentialsManager,
        tokenManager = this.tokenManager;

    var hostParts = host.split(':'), port;
    if (hostParts.length === 2) {
        host = hostParts[0];
        port = hostParts[1];
    } else {
        port = protocol === 'https' ? '443' : '80';
    }

    function getNormalizedRequestString(ext) {
        return [
            macParams.ts,
            macParams.nonce,
            method,
            url,
            host,
            port,
            ext
        ].join("\x0a") + "\x0a";
    }

    var extParams = qs.parse(macParams.ext);
    if (!extParams.bodyhash) {
        callback(new errors.ApiError('unauthorized', 'Missing bodyhash parameter in ext field'));
    }


    credentialsManager.load(credentialsId, function(err, credentials) {
        if (err) {
            callback(err);
        } else {
            var signatureCredentials = credentials.get('signatureCredentials');
            var signer = signerRegistry.get(signatureCredentials.get('algorithm'));
            var macValid = signer.checkSign(
                signatureCredentials,
                macParams.mac,
                getNormalizedRequestString(macParams.ext)
            );
            if (!macValid) {
                callback(new errors.ApiError('unauthorized', 'Invalid MAC value'));
                return;
            }

            blacklistManager.isNonceUsed(macParams.id, macParams.nonce, function(err, nonceUsed) {
                if (err) {
                    callback(err);
                } else if (nonceUsed) {
                    callback(new errors.ApiError('unauthorized', 'Nonce already used'));
                } else {
                    async.parallel({
                        timestampValid: isTimestampValid(macParams.id, macParams.ts),
                        bodyHash: getBodyHash(req, signer.getHashAlgorithm()),
                        token: getToken(extParams),
                        useNonce: useNonce(macParams.id, macParams.nonce)
                    }, function(err, result) {
                        if (err) {
                            callback(err);
                        } else if (!result.timestampValid) {
                            callback(new errors.ApiError('unauthorized', 'Timestamp value is invalid'));
                        } else if (result.bodyHash !== extParams.bodyhash) {
                            callback(new errors.ApiError('unauthorized', 'Bodyhash in ext is invalid'));
                        } else {
                            callback(null, credentials, result.token);
                        }
                    });
                }
            });
        }
    });

    function getBodyHash(req, algorithm) {
        return function(callback) {
            var bodyHash = crypto.createHash(algorithm);
            bodyHash.update(req.rawBody);
            callback(null, bodyHash.digest('base64'));
        };
    }

    function useNonce(macId, nonce) {
        return function(callback) {
            blacklistManager.useNonce(macId, nonce, 300, callback);
        };
    }


    function getToken(extParams) {
        return function(callback) {
            if (extParams.access_token_id && extParams.access_token_mac) {
                tokenManager.load(extParams.access_token_id, function(err, token) {
                    if (err) {
                        callback(err);
                    } else {
                        blacklistManager.isCodeRevoked(token.get('codeId'), function(err, revoked) {
                            if (err) {
                                callback(err);
                            } else if (revoked) {
                                callback(new errors.ApiError('unauthorized', 'This token was revoked'));
                            } else {
                                var signatureCredentials = token.get('signatureCredentials');
                                var signResult = signerRegistry.get(signatureCredentials.get('algorithm')).checkSign(
                                    signatureCredentials,
                                    extParams.access_token_mac,
                                    getNormalizedRequestString('')
                                );
                                if (signResult) {
                                    callback(null, token);
                                } else {
                                    callback(new errors.ApiError(
                                        'unauthorized',
                                        'Invalid access token MAC value in ext parameter'
                                    ));
                                }
                            }
                        });
                    }
                });
            } else {
                callback();
            }
        };
    }

    function isTimestampValid(macId, ts) {
        return function(callback) {
            var diff = parseInt(new Date().getTime() / 1000) - ts;
            timestampManager.load(macId, function(err, timestampDiff) {
                if (err) {
                    callback(err);
                } else if (timestampDiff === null) {
                    timestampManager.save(macId, diff, function(err, result) {
                        err ? callback(err) : callback(null, true);
                    });
                } else {
                    callback(null, Math.abs(diff - timestampDiff) < 60);
                }
            });
        };
    }

};


