var crypto = require('crypto');
var models = require('model/models');

var Signer = module.exports = function(hashAlgorithm, generateRandom) {
    if (hashAlgorithm === 'sha256') {
        this.type = 'hmac-sha-256';
    } else if (hashAlgorithm === 'sha512') {
        this.type = 'hmac-sha-512';
    } else {
        throw new Error('Unknown hash algorithm specified');
    }
    this.hashAlgorithm = hashAlgorithm;
    this.generateRandom = generateRandom;
};

Signer.prototype.checkSign = function(credentials, signature, text) {
    var hmac = crypto.createHmac(this.hashAlgorithm, credentials.get('sharedKey'));
    hmac.write(text);
    return signature === hmac.digest('base64');
};
Signer.prototype.getType = function() {
    return this.type;
};
Signer.prototype.getHashAlgorithm = function() {
    return this.hashAlgorithm;
};

Signer.prototype.prepareForSave = function(signatureCredentials, callback) {
    this.generateRandom(function(err, secret) {
        if (!err) {
            signatureCredentials.set('sharedKey', secret);
        }
        callback(err, signatureCredentials);
    });
};
Signer.prototype.getCredentialsType = function() {
    return 'symmetric';
};