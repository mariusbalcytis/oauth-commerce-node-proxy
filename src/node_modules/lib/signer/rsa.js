var crypto = require('crypto');
var models = require('model/models');

var Signer = module.exports = function(hashAlgorithm, padding) {
    if (padding === 'pkcs1') {
        this.type = 'rsa-pkcs1';
    } else {
        throw new Error('Unknown padding specified');
    }
    if (hashAlgorithm === 'sha256') {
        this.type += '-sha-256';
        this.algorithm = 'RSA-SHA256';
    } else if (hashAlgorithm === 'sha512') {
        this.type += '-sha-512';
        this.algorithm = 'RSA-SHA512';
    } else {
        throw new Error('Unknown hash algorithm specified');
    }
    this.hashAlgorithm = hashAlgorithm;
};
Signer.prototype.checkSign = function(credentials, signature, text) {
    var verify = crypto.createVerify(this.algorithm);
    verify.update(text);
    return verify.verify(credentials.get('publicKey'), signature, 'base64');
};
Signer.prototype.getType = function() {
    return this.type;
};
Signer.prototype.getHashAlgorithm = function() {
    return this.hashAlgorithm;
};

Signer.prototype.prepareForSave = function(signatureCredentials, callback) {
    callback(null, signatureCredentials);
};
Signer.prototype.getCredentialsType = function() {
    return 'asymmetric';
};