var _ = require('lodash')._;
var parametersReader = require('lib/parametersReader');
var ServiceContainer = module.exports = function() {
    this.definitions = {};
    this.afterCallbacks = {};
    this.aliases = {};
    this.services = {};
};
ServiceContainer.prototype.set = function(serviceId, constructor) {
    if (typeof constructor === 'undefined' && _.isObject(serviceId)) {
        for (var key in serviceId) {
            if (serviceId.hasOwnProperty(key)) {
                this.set(key, serviceId[key]);
            }
        }
    } else {
        this.definitions[serviceId] = constructor;
        if (typeof this.afterCallbacks[serviceId] === 'undefined') {
            this.afterCallbacks[serviceId] = [];
        }
    }
    return this;
};
ServiceContainer.prototype.reset = function(serviceId) {
    delete this.definitions[serviceId];
    delete this.afterCallbacks[serviceId];
    delete this.aliases[serviceId];
    delete this.services[serviceId];
    return this;
};
ServiceContainer.prototype.after = function(serviceId, callback) {
    if (typeof this.afterCallbacks[serviceId] === 'undefined') {
        this.afterCallbacks[serviceId] = [];
    }
    this.afterCallbacks[serviceId].push(callback);
    return this;
};
ServiceContainer.prototype.alias = function(serviceId, aliasedServiceId) {
    this.aliases[serviceId] = aliasedServiceId;
    return this;
};
ServiceContainer.prototype.get = function(serviceId) {
    if (typeof this.services[serviceId] !== 'undefined') {
        return this.services[serviceId];
    }
    if (typeof this.definitions[serviceId] === 'undefined') {
        if (typeof this.aliases[serviceId] === 'undefined') {
            throw new Error('No such service: ' + serviceId);
        } else {
            return this.get(this.aliases[serviceId]);
        }
    }
    var constructor = this.definitions[serviceId];
    var after = this.afterCallbacks[serviceId];
    var service;
    if (_.isFunction(constructor)) {
        service = constructor.call(this);
    } else {
        service = constructor;
    }
    for (var i = 0; i < after.length; i++) {
        after[i].call(this, service);
    }
    this.services[serviceId] = service;
    return service;
};
ServiceContainer.prototype.load = function (parametersFilePath, callback) {
    var container = this;
    parametersReader.load(parametersFilePath, function(params) {
        if (params) {
            container.set(params);
        }
        callback(container);
    });
};