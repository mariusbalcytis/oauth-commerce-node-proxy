var _ = require('lodash')._;
var models = require('model/models');
var errors = require('lib/errors');

function success(successCallback, next) {
    return function(err, result) {
        if (err) {
            next(err);
        } else {
            successCallback(result);
        }
    };
}

module.exports = {

    getApplicationPassword: function(req, res, next) {
        this.get('repository.application_password').load(req.params.id, success(function(credentials) {
            res.send(JSON.stringify(credentials.toJSON()));
        }, next));
    },

    getAllPasswordsForApplication: function(req, res, next) {
        if (!req.query.applicationId) {
            next(new errors.ApiError('invalid_request', 'Missing applicationId parameter'));
        }
        this.get('repository.application_password').loadAllByRemoteId(req.query.applicationId, success(function(apps) {
            res.send(JSON.stringify(apps.toJSON()));
        }, next));
    },

    createApplicationPassword: function(req, res, next) {
        var credentials = new models.ApplicationPassword(req.body);
        if (!credentials.isValid()) {
            next(credentials.validationError);
            return;
        }
        var credentialsManager = this.get('repository.application_password');
        this.get('random').generateRandomString(this.get('application_secret_size'), success(function(secret) {
            credentials.set('secret', secret);
            credentialsManager.save(credentials, success(function(credentials) {
                res.send(JSON.stringify(credentials.toJSON()));
            }, next));
        }));
    },

    removeApplicationPassword: function(req, res, next) {
        this.get('repository.application_password').remove(req.params.id, success(function() {
            res.send(JSON.stringify(true));
        }, next));
    },

    removeAllPasswordsForApplication: function(req, res, next) {
        if (!req.query.applicationId) {
            next(new errors.ApiError('invalid_request', 'Missing applicationId parameter'));
        }
        this.get('repository.application_password').removeAllByRemoteId(req.query.applicationId, success(function() {
            res.send(JSON.stringify(true));
        }, next));
    }
};