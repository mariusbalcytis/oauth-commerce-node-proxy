var _ = require('lodash')._;
var models = require('model/models');
var errors = require('lib/errors');

function success(successCallback, next) {
    return function(err, result) {
        if (err) {
            next(err);
        } else {
            successCallback(result);
        }
    };
}

module.exports = {

    getClientCredentials: function(req, res, next) {
        this.get('repository.client_credentials').load(req.params.id, success(function(credentials) {
            res.send(JSON.stringify(credentials.toJSON()));
        }, next));
    },

    getAllCredentialsForClient: function(req, res, next) {
        if (!req.query.clientId) {
            next(new errors.ApiError('invalid_request', 'Missing clientId parameter'));
        }
        this.get('repository.client_credentials').loadAllByRemoteId(req.query.clientId, success(function(clients) {
            res.send(JSON.stringify(clients.toJSON()));
        }, next));
    },

    createClientCredentials: function(req, res, next) {
        var attr = req.body, signer;
        if (attr.signatureCredentials) {
            signer = this.signerRegistry.get(attr.signatureCredentials.mac_algorithm);
            attr.signatureCredentials.type = signer.getCredentialsType();
        }

        var credentials = new models.ClientCredentials(attr);
        if (!credentials.isValid()) {
            next(credentials.validationError);
            return;
        }
        var credentialsManager = this.get('repository.client_credentials');
        signer.prepareForSave(credentials.get('signatureCredentials'), success(function() {
            credentialsManager.save(credentials, success(function(credentials) {
                res.send(JSON.stringify(credentials.toJSON({includePrivate: true})));
            }, next));
        }, next));
    },

    removeClientCredentials: function(req, res, next) {
        this.get('repository.client_credentials').remove(req.params.id, success(function() {
            res.send(JSON.stringify(true));
        }, next));
    },

    removeAllCredentialsForClient: function(req, res, next) {
        if (!req.query.clientId) {
            next(new errors.ApiError('invalid_request', 'Missing clientId parameter'));
        }
        this.get('repository.client_credentials').removeAllByRemoteId(req.query.clientId, success(function() {
            res.send(JSON.stringify(true));
        }, next));
    }
};