var _ = require('lodash')._;

module.exports = Repository = function(repositories, defaultRepository) {
    _.extend(this, defaultRepository, defaultRepository.__proto__);
    for (var method in repositories) {
        if (repositories.hasOwnProperty(method)) {
            this[method] = (function(method) {
                return function() {
                    var defaultHappened = false;
                    var i = 0;
                    var lastError = new Error('No repositories defined');
                    var callback;
                    var args = _.toArray(arguments);

                    var func = function() {
                        var repository = repositories[method][i];
                        if (typeof repository === 'undefined') {
                            if (defaultHappened) {
                                callback(lastError);
                                return;
                            } else {
                                repository = defaultRepository;
                                defaultHappened = true;
                            }
                        } else if (repository === defaultRepository) {
                            defaultHappened = true;
                        }
                        repository[method].apply(repository, args);
                    };
                    var partialCallback = function(err, result) {
                        if (err) {
                            lastError = err;
                            i++;
                            func();
                        } else {
                            callback.apply(null, arguments);
                        }
                    };

                    callback = args.pop();
                    args.push(partialCallback);

                    func();
                };
            })(method);
        }
    }
};