var zlib = require('zlib');
var _ = require('lodash')._;
var models = require('model/models');
var errors = require('lib/errors');

var CodeRepository = module.exports = function(signer, counter) {
    this.signer = signer;
    this.counter = counter;
};

CodeRepository.prototype.load = function(codeValue, callback) {
    if (!codeValue) {
        callback(new errors.ApiError('not_found', 'Code not found'));
    }
    var signer = this.signer;
    var zipped = new Buffer(codeValue, 'base64');
    zlib.inflate(zipped, function(err, buffer) {
        if (err) {
            callback(err);
        } else {
            var data = JSON.parse(buffer.toString());
            var sign = data._;
            delete data._;
            if (sign === signer.sign(JSON.stringify(data))) {
                var code = new models.AccessTokenCode({
                    'id': data.i,
                    'expires': parseInt(data.e),
                    'credentialsId': data.c,
                    'scopes': data.s.split(' '),
                    'redirectUri': data.r,
                    'userId': data.u,
                    'value': codeValue
                });
                callback(null, code);
            } else {
                callback(new errors.ApiError('invalid_grant', 'Code invalid'));
            }
        }
    });
};
CodeRepository.prototype.save = function(code, callback) {
    var signer = this.signer;
    this.counter.increase(function(err, id) {
        if (err) {
            callback(err);
        } else {
            code.set('id', id);
            var data = {
                i: code.get('id'),
                e: parseInt(code.get('expires').getTime() / 1000),
                c: code.get('credentialsId'),
                s: code.get('scopes').join(' '),
                r: code.get('redirectUri'),
                u: code.get('userId')
            };
            data._ = signer.sign(JSON.stringify(data));
            var encoded = JSON.stringify(data);
            zlib.deflate(encoded, function(err, buffer) {
                if (err) {
                    callback(err);
                } else {
                    code.set('value', buffer.toString('base64'));
                    callback(null, code);
                }
            });
        }
    });
};