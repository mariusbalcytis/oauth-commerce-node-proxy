var zlib = require('zlib');
var models = require('../../model/models');

var TokenRepository = module.exports = function(signer) {
    this.signer = signer;
};

TokenRepository.prototype.load = function(token, callback) {
    if (!token) {
        callback(new errors.ApiError('not_found', 'Token not found'));
    }
    var signer = this.signer;
    var zipped = new Buffer(token, 'base64');
    zlib.inflate(zipped, function(err, buffer) {
        if (err) {
            callback(err);
        } else {
            var data = JSON.parse(buffer.toString());
            var tokenData = {
                'expires': parseInt(data.e),
                'codeId': data.c,
                'credentialsId': data.r,
                'scopes': data.s.split(' '),
                'userId': data.u
            };
            tokenData.signatureCredentials = {
                mac_key: signer.sign(token),
                mac_algorithm: 'hmac-sha-256',
                access_token: token,
                type: 'symmetric'
            };
            callback(null, new models.AccessToken(tokenData));
        }
    });
};
TokenRepository.prototype.save = function(accessToken, callback) {
    if ((accessToken.get('expires').getTime() - new Date().getTime())  / 1000 > 604800) {
        accessToken.set('expires', new Date(new Date().getTime() + 604800000));
    }

    var signer = this.signer;
    var data = {
        e: parseInt(accessToken.get('expires').getTime() / 1000),
        c: accessToken.get('codeId'),
        r: accessToken.get('credentialsId'),
        s: accessToken.get('scopes').join(' '),
        u: accessToken.get('userId')
    };
    var encoded = JSON.stringify(data);
    zlib.deflate(encoded, function(err, buffer) {
        if (err) {
            callback(err);
        } else {
            var tokenValue = buffer.toString('base64');
            accessToken.set('signatureCredentials', {
                mac_key: signer.sign(tokenValue),
                mac_algorithm: 'hmac-sha-256',
                access_token: tokenValue,
                type: 'symmetric'
            });
            callback(null, accessToken);
        }
    });
};