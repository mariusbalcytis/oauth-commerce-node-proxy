
var _ = require('lodash')._;

var BlacklistRepository = module.exports = function(redisClient) {
    this.redisClient = redisClient;
};

BlacklistRepository.prototype.isCodeUsed = function(codeId, callback) {
    this.redisClient.exists('blacklist:code:' + codeId, function(err, result) {
        callback(err, result !== 0);
    });
};
BlacklistRepository.prototype.useCode = function (codeId, expireAt, callback) {
    this.redisClient.multi()
        .set('blacklist:code:' + codeId, '1')
        .expireat('blacklist:code:' + codeId, parseInt(expireAt))
        .exec(callback);
};
BlacklistRepository.prototype.isCodeRevoked = function(codeId, callback) {
    if (codeId === null) {
        callback(null, false);
    } else {
        this.redisClient.exists('blacklist:code:revoke:' + codeId, function(err, result) {
            callback(err, result !== 0);
        });
    }
};
BlacklistRepository.prototype.revokeCode = function (codeId, callback) {
    this.redisClient.set('blacklist:code:revoke:' + codeId, '1', 'EX', 604800, callback);
};
BlacklistRepository.prototype.isNonceUsed = function(credentialsId, nonce, callback) {
    this.redisClient.exists('blacklist:nonce:' + credentialsId + ':' + nonce, function(err, result) {
        callback(err, result !== 0);
    });
};
BlacklistRepository.prototype.useNonce = function (credentialsId, nonce, expireAfter, callback) {
    this.redisClient.multi()
        .set('blacklist:nonce:' + credentialsId + ':' + nonce, '1')
        .expire('blacklist:nonce:' + credentialsId + ':' + nonce, expireAfter)
        .exec(callback);
};