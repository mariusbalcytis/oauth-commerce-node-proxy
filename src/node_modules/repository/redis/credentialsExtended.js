var _ = require('lodash')._;
var async = require('async');
var errors = require('../../lib/errors');

var CredentialsRepository = module.exports = require('repository/redis/credentials');

CredentialsRepository.prototype.setModelType = function(type) {
    this.type = type;
};

CredentialsRepository.prototype.removeAllByRemoteId = function(remoteId, callback) {
    var redisClient = this.redisClient, key = this.key, relationKey = this.relationKey, type = this.type;
    redisClient.smembers(relationKey(remoteId, type), function(err, result) {
        async.each(result, function(id, callback) {
            redisClient.hdel(key, id, callback);
        }, function(err) {
            if (err) {
                callback(err);
            } else {
                redisClient.del(relationKey(remoteId, type), callback);
            }
        });
    });
};
CredentialsRepository.prototype.loadAllByRemoteId = function(remoteId, callback) {
    var redisClient = this.redisClient;
    var load = _.bind(this.load, this);
    var Collection = this.Collection;
    return redisClient.smembers(this.relationKey(remoteId, this.type), function(err, results) {
        if (err) {
            callback(err);
        } else {
            async.map(results, load, function(err, results) {
                if (err) {
                    callback(err);
                } else {
                    callback(null, new Collection(results));
                }
            });
        }
    })
};