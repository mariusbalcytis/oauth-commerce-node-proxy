var _ = require('lodash')._;
var async = require('async');
var errors = require('../../lib/errors');

var CredentialsRepository = module.exports = function(redisClient, crypto, prefix, Model, Collection) {
    this.redisClient = redisClient;
    this.crypto = crypto;
    this.Model = Model;
    this.Collection = Collection;

    this.key = prefix;
    this.counterKey = prefix + ':counter';
    this.relationKey = function(remoteId, type) {
        return prefix + ':relation:' + (type ? type + ':' : '') + remoteId;
    };
};

CredentialsRepository.prototype.load = function(id, callback) {
    var crypto = this.crypto;
    var Collection = this.Collection;
    return this.redisClient.hget(this.key, id, function(err, reply) {
        if (err) {
            callback(err);
        } else if (!reply) {
            callback(new errors.ApiError('not_found', 'Credentials not found', 404));
        } else {
            var credentials = new Collection([JSON.parse(reply)]).at(0);
            credentials.decipher(crypto);
            callback(null, credentials);
        }
    });
};
CredentialsRepository.prototype.save = function(credentials, callback) {
    var redisClient = this.redisClient, self = this;
    if (!credentials.get('id')) {
        redisClient.incr(this.counterKey, function(err, id) {
            if (err) {
                callback(err);
            } else {
                credentials.set('id', id);
                self.save(credentials, callback);
            }
        });
    } else {
        var saveText = JSON.stringify(credentials.toJSON({extended: true, crypto: this.crypto}));
        redisClient.multi()
            .hset(this.key, credentials.get('id'), saveText)
            .sadd(this.relationKey(credentials.getRemoteId(), credentials.get('type')), credentials.get('id'))
            .exec(function(err) {
                callback(err, credentials);
            })
        ;
    }
};
CredentialsRepository.prototype.remove = function(id, callback) {
    var redisClient = this.redisClient;
    var relationKey = this.relationKey, key = this.key;
    this.load(id, function(err, credentials) {
        if (err) {
            callback(err);
        } else {
            redisClient.srem(
                relationKey(credentials.getRemoteId(), credentials.get('type')), id, function(err, result) {
                    if (err) {
                        callback(err);
                    } else {
                        redisClient.hdel(key, id, callback);
                    }
                }
            );
        }
    });
};