var Backbone = require('backbone-relational');
var _ = require('lodash')._;
var models = exports;

Backbone.Relational.store.addModelScope(models);
var AppModel = Backbone.RelationalModel.extend({
    idAttribute: '_id'
});

models.LoginCredentials = AppModel.extend({
    initialize: function() {
        var self = this;
        this.on('change:id', function() {
            self.get('signatureCredentials').set('macId', self.get('id'));
        });
    },
    relations: [{
        type: Backbone.HasOne,
        key: 'signatureCredentials',
        relatedModel: 'SignatureCredentials'
    }],
    subModelTypes: {
        'client': 'ClientCredentials',
        'application': 'ApplicationCredentials'
    },
    hasPermission: function(permission) {
        return _.indexOf(this.get('permissions'), permission) !== -1;
    },
    decipher: function(crypto) {
        var signatureCredentials = this.get('signatureCredentials');
        if (signatureCredentials) {
            signatureCredentials.decipher(crypto);
        }
    }
});

models.ClientCredentials = models.LoginCredentials.extend({
    defaults: {
        id: null,
        clientId: null,
        permissions: [],
        signatureCredentials: {},
        type: 'client'
    },
    validate: function(attrs, options) {
        var cred = attrs.signatureCredentials;
        if (!attrs.clientId) {
            return 'clientId must be specified';
        } else if (!cred) {
            return 'signatureCredentials must be specified';
        } else if (!cred.isValid()) {
            return cred.validationError;
        } else {
            return null;
        }
    },
    getRemoteId: function() {
        return this.get('clientId');
    }
});


models.SignatureCredentials = AppModel.extend({
    subModelTypes: {
        'symmetric': 'SymmetricCredentials',
        'asymmetric': 'AsymmetricCredentials'
    },
    decipher: function() {
        // no-op
    }
});
models.SymmetricCredentials = models.SignatureCredentials.extend({
    defaults: {
        algorithm: null,
        macId: null,
        sharedKey: null,
        type: 'symmetric'
    },
    initialize: function(attr) {
        this.set({
            'algorithm': this.get('mac_algorithm'),
            'macId': this.get('access_token'),
            'sharedKey': this.get('mac_key')
        });
        this.unset('mac_algorithm');
        this.unset('access_token');
        this.unset('mac_key');
    },
    toJSON: function(options) {
        var data = {
            'mac_algorithm': this.get('algorithm'),
            'access_token': this.get('macId'),
            'mac_key': options && options.includePrivate ? this.get('sharedKey') : null
        };
        if (options && options.extended) {
            data.type = this.get('type');
        }
        if (options && options.crypto) {
            data.cipheredSharedKey = options.crypto.cipher(this.get('sharedKey'));
        }
        return data;
    },
    decipher: function(crypto) {
        var ciphered = this.get('cipheredSharedKey');
        if (ciphered && !this.get('sharedKey')) {
            this.set('sharedKey', crypto.decipher(this.get('cipheredSharedKey')));
        }
        this.unset('cipheredSharedKey');
    }
});
models.AsymmetricCredentials = models.SignatureCredentials.extend({
    defaults: {
        algorithm: null,
        macId: null,
        privateKey: null,
        publicKey: null,
        type: 'asymmetric'
    },
    initialize: function(attr) {
        this.set({
            'algorithm': this.get('mac_algorithm'),
            'macId': this.get('access_token'),
            'publicKey': this.get('public_key')
        });
        this.unset('mac_algorithm');
        this.unset('access_token');
        this.unset('public_key');
    },
    toJSON: function(options) {
        var data = {
            'mac_algorithm': this.get('algorithm'),
            'access_token': this.get('macId'),
            'public_key': this.get('publicKey'),
            'mac_key': options && options.includePrivate ? this.get('privateKey') : null
        };
        if (options && options.extended) {
            data.type = this.get('type');
        }
        return data;
    }
});

models.ApplicationPassword = AppModel.extend({
    defaults: {
        id: null,
        applicationId: null,
        secret: null
    },
    getRemoteId: function() {
        return this.get('applicationId');
    },
    decipher: function() {
        // no-op
    }
});
models.ApplicationCredentials = models.LoginCredentials.extend({
    defaults: {
        id: null,
        passwordId: null,
        permissions: [],
        signatureCredentials: {},
        type: 'application'
    },
    getRemoteId: function() {
        return this.get('passwordId');
    }
});

models.AccessToken = AppModel.extend({
    defaults: {
        expires: null,
        credentialsId: null,
        codeId: null,
        scopes: [],
        userId: null,
        signatureCredentials: {}
    },
    relations: [{
        type: Backbone.HasOne,
        key: 'signatureCredentials',
        relatedModel: 'SignatureCredentials'
    }],
    initialize: function(attr) {
        this.set('expires', new Date(this.get('expires') * 1000));
    },
    toJSON: function(options) {
        var json = this.get('signatureCredentials').toJSON(options);
        return _.extend(json, {
            scope: this.get('scopes').join(' '),
            expires_in: Math.max(parseInt((this.get('expires').getTime() - new Date().getTime()) / 1000), 0),
            token_type: 'urn:marius-balcytis:oauth:token-type:mac-extended'
        });
    },
    decipher: function(crypto) {
        var signatureCredentials = this.get('signatureCredentials');
        if (signatureCredentials) {
            signatureCredentials.decipher(crypto);
        }
    }
});

models.AccessTokenCode = AppModel.extend({
    defaults: {
        id: null,
        expires: null,
        credentialsId: null,
        scopes: [],
        redirectUri: null,
        userId: null
    },
    initialize: function(attr) {
        this.set('expires', new Date(this.get('expires') * 1000));
    }
});

models.ClientCredentialsCollection = Backbone.Collection.extend({
    model: models.ClientCredentials
});
models.ApplicationCredentialsCollection = Backbone.Collection.extend({
    model: models.ApplicationCredentials
});
models.ApplicationPasswordCollection = Backbone.Collection.extend({
    model: models.ApplicationPassword
});
models.LoginCredentialsCollection = Backbone.Collection.extend({
    model: models.LoginCredentials
});